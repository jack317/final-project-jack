{"ast":null,"code":"import axios from\"axios\";import{Card,Form,Button}from\"react-bootstrap\";/**\n * iterates over a paragraph and break it into chunks with blank inputs in between\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function LoadBlanks(_ref){var passText=_ref.passText,passTitle=_ref.passTitle;var outputLines=[];var prevIndex=0;var j=1;// show completed MadLib\nfunction completeMessage(filledInMadLib){document.getElementById('form-text').style.display=\"none\";var completed=document.createElement(\"p\");completed.innerHTML=filledInMadLib;completed.className=\"madlib-paragraphs\";document.getElementById('main-text').appendChild(completed);};function handleSubmit(){// Get the text and all of the inputs by identifying name and save it in a new array\nvar filledInMadLib=outputLines.flatMap(function(line){return[line.text,document.getElementsByName(line.blank)[0].value];});// Create an object to send to the DB to save the newly created MadLib!\nvar newLib={\"title_saved\":passTitle,\"body_saved\":filledInMadLib.join(' ')};// Use axios to post to the database\naxios.post('api/Saved/',newLib).then(function(res){return console.log(res);}).then(function(){return completeMessage(filledInMadLib);});}// iterates through all characters in the string and removes < character\nfor(var i=0;i<passText.length;i++){if(passText[i]===\"<\"){var newpassText=passText.substring(prevIndex,i-1);// outputLines is an array or objects that has the substring saved in text\n// and the unique identifier number that is used on the input component\n// in blank\noutputLines.push({text:newpassText,blank:j});prevIndex=i+1;j++;}}// need to add the last section of text each time otherwise it would be left off\nvar finalText=passText.substring(prevIndex,i);outputLines.push({text:finalText,blank:j});return/*#__PURE__*/_jsx(Card.Text,{id:\"main-text\",className:\"madlib-text\",children:/*#__PURE__*/_jsxs(Form,{id:\"form-text\",children:[outputLines.map(function(line){return/*#__PURE__*/_jsxs(\"p\",{className:\"madlib-paragraphs\",children:[line.text,/*#__PURE__*/_jsx(\"input\",{name:line.blank,className:\"blankSpace\"})]});}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Button,{className:\"madlib-button\",onClick:handleSubmit,children:\"Submit MadLib!\"})})]})});}","map":{"version":3,"names":["axios","Card","Form","Button","LoadBlanks","passText","passTitle","outputLines","prevIndex","j","completeMessage","filledInMadLib","document","getElementById","style","display","completed","createElement","innerHTML","className","appendChild","handleSubmit","flatMap","line","text","getElementsByName","blank","value","newLib","join","post","then","res","console","log","i","length","newpassText","substring","push","finalText","map"],"sources":["/Users/jack/Desktop/final_assignment/final/src/components/LoadBlanks.js"],"sourcesContent":["import axios from \"axios\";\nimport { Card, Form, Button } from \"react-bootstrap\";\n\n/**\n * iterates over a paragraph and break it into chunks with blank inputs in between\n */\nexport function LoadBlanks({ passText, passTitle }) {\n    var outputLines = [];\n    var prevIndex = 0;\n    var j = 1;\n   \n    \n    // show completed MadLib\n    function completeMessage(filledInMadLib) {\n        document.getElementById('form-text').style.display = \"none\";\n        var completed = document.createElement(\"p\");\n        completed.innerHTML = filledInMadLib;\n        completed.className = \"madlib-paragraphs\"\n        document.getElementById('main-text').appendChild(completed);\n    };\n\n\n    function handleSubmit() {\n        // Get the text and all of the inputs by identifying name and save it in a new array\n        var filledInMadLib = outputLines.flatMap((line) => {\n            return [line.text, document.getElementsByName(line.blank)[0].value];\n        });\n\n        // Create an object to send to the DB to save the newly created MadLib!\n        var newLib = {\n            \"title_saved\": passTitle,\n            \"body_saved\": filledInMadLib.join(' ')\n        }\n        \n        // Use axios to post to the database\n        axios\n            .post('api/Saved/', newLib)\n            .then((res) => console.log(res))\n            .then(() => completeMessage(filledInMadLib))\n    }\n\n    // iterates through all characters in the string and removes < character\n    for (var i = 0; i < passText.length; i++) {\n        if (passText[i] === \"<\") {\n            var newpassText = passText.substring(prevIndex, i - 1);\n            // outputLines is an array or objects that has the substring saved in text\n            // and the unique identifier number that is used on the input component\n            // in blank\n            outputLines.push({text: newpassText, blank: j});\n            prevIndex = i + 1;\n            j++\n        }\n    }\n    // need to add the last section of text each time otherwise it would be left off\n    var finalText = passText.substring(prevIndex, i);\n    outputLines.push({text: finalText, blank: j});\n\n    return (\n        <Card.Text id=\"main-text\" className=\"madlib-text\">\n            <Form id=\"form-text\">\n                {outputLines.map((line) => (\n                    <p className=\"madlib-paragraphs\">{line.text} \n                        {<input\n                            name={line.blank}\n                            className=\"blankSpace\">\n                        </input>}\n                    </p>\n                ))}\n                <div>\n                    <Button\n                        className=\"madlib-button\"\n                        onClick={handleSubmit}>\n                    Submit MadLib!\n                    </Button>\n                </div>\n            </Form>\n        </Card.Text>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}