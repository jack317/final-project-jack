{"ast":null,"code":"var _jsxFileName = \"/Users/jack/Desktop/final_assignment/final/frontend/src/components/LoadBlanks.js\";\nimport axios from \"axios\";\nimport { Card, Form, Button } from \"react-bootstrap\";\n/**\n * iterates over a paragraph and break it into chunks with blank inputs in between\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LoadBlanks(_ref) {\n  let {\n    passText,\n    passTitle\n  } = _ref;\n  var outputLines = [];\n  var prevIndex = 0;\n  var j = 1; // show completed MadLib\n\n  function completeMessage(filledInMadLib) {\n    document.getElementById('form-text').style.display = \"none\";\n    var completed = document.createElement(\"p\");\n    completed.innerHTML = filledInMadLib;\n    completed.className = \"madlib-paragraphs\";\n    document.getElementById('main-text').appendChild(completed);\n  }\n\n  ;\n\n  function handleSubmit() {\n    // Get the text and all of the inputs by identifying name and save it in a new array\n    var filledInMadLib = outputLines.flatMap(line => {\n      return [line.text, document.getElementsByName(line.blank)[0].value];\n    }); // Create an object to send to the DB to save the newly created MadLib!\n\n    var newLib = {\n      \"title_saved\": passTitle,\n      \"body_saved\": filledInMadLib.join(' ')\n    }; // Use axios to post to the database\n\n    axios.post('api/Saved/', newLib).then(res => console.log(res)).then(() => completeMessage(filledInMadLib));\n  } // iterates through all characters in the string and removes < character\n\n\n  for (var i = 0; i < passText.length; i++) {\n    if (passText[i] === \"<\") {\n      var newpassText = passText.substring(prevIndex, i - 1); // outputLines is an array or objects that has the substring saved in text\n      // and the unique identifier number that is used on the input component\n      // in blank\n\n      outputLines.push({\n        text: newpassText,\n        blank: j\n      });\n      prevIndex = i + 1;\n      j++;\n    }\n  } // need to add the last section of text each time otherwise it would be left off\n\n\n  var finalText = passText.substring(prevIndex, i);\n  outputLines.push({\n    text: finalText,\n    blank: j\n  });\n  return /*#__PURE__*/_jsxDEV(Card.Text, {\n    id: \"main-text\",\n    className: \"madlib-text\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      id: \"form-text\",\n      children: [outputLines.map(line => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"madlib-paragraphs\",\n        children: [line.text, /*#__PURE__*/_jsxDEV(\"input\", {\n          name: line.blank,\n          className: \"blankSpace\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"madlib-button\",\n          onClick: handleSubmit,\n          children: \"Submit MadLib!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_c = LoadBlanks;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadBlanks\");","map":{"version":3,"names":["axios","Card","Form","Button","LoadBlanks","passText","passTitle","outputLines","prevIndex","j","completeMessage","filledInMadLib","document","getElementById","style","display","completed","createElement","innerHTML","className","appendChild","handleSubmit","flatMap","line","text","getElementsByName","blank","value","newLib","join","post","then","res","console","log","i","length","newpassText","substring","push","finalText","map"],"sources":["/Users/jack/Desktop/final_assignment/final/frontend/src/components/LoadBlanks.js"],"sourcesContent":["import axios from \"axios\";\nimport { Card, Form, Button } from \"react-bootstrap\";\n\n/**\n * iterates over a paragraph and break it into chunks with blank inputs in between\n */\nexport function LoadBlanks({ passText, passTitle }) {\n    var outputLines = [];\n    var prevIndex = 0;\n    var j = 1;\n   \n    \n    // show completed MadLib\n    function completeMessage(filledInMadLib) {\n        document.getElementById('form-text').style.display = \"none\";\n        var completed = document.createElement(\"p\");\n        completed.innerHTML = filledInMadLib;\n        completed.className = \"madlib-paragraphs\"\n        document.getElementById('main-text').appendChild(completed);\n    };\n\n\n    function handleSubmit() {\n        // Get the text and all of the inputs by identifying name and save it in a new array\n        var filledInMadLib = outputLines.flatMap((line) => {\n            return [line.text, document.getElementsByName(line.blank)[0].value];\n        });\n\n        // Create an object to send to the DB to save the newly created MadLib!\n        var newLib = {\n            \"title_saved\": passTitle,\n            \"body_saved\": filledInMadLib.join(' ')\n        }\n        \n        // Use axios to post to the database\n        axios\n            .post('api/Saved/', newLib)\n            .then((res) => console.log(res))\n            .then(() => completeMessage(filledInMadLib))\n    }\n\n    // iterates through all characters in the string and removes < character\n    for (var i = 0; i < passText.length; i++) {\n        if (passText[i] === \"<\") {\n            var newpassText = passText.substring(prevIndex, i - 1);\n            // outputLines is an array or objects that has the substring saved in text\n            // and the unique identifier number that is used on the input component\n            // in blank\n            outputLines.push({text: newpassText, blank: j});\n            prevIndex = i + 1;\n            j++\n        }\n    }\n    // need to add the last section of text each time otherwise it would be left off\n    var finalText = passText.substring(prevIndex, i);\n    outputLines.push({text: finalText, blank: j});\n\n    return (\n        <Card.Text id=\"main-text\" className=\"madlib-text\">\n            <Form id=\"form-text\">\n                {outputLines.map((line) => (\n                    <p className=\"madlib-paragraphs\">{line.text} \n                        {<input\n                            name={line.blank}\n                            className=\"blankSpace\">\n                        </input>}\n                    </p>\n                ))}\n                <div>\n                    <Button\n                        className=\"madlib-button\"\n                        onClick={handleSubmit}>\n                    Submit MadLib!\n                    </Button>\n                </div>\n            </Form>\n        </Card.Text>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}